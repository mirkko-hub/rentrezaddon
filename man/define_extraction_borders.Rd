% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/biostrings_helper.R
\name{define_extraction_borders}
\alias{define_extraction_borders}
\title{define_extraction_borders}
\usage{
define_extraction_borders(
  sseqid,
  start,
  end,
  strand,
  xstringset,
  ext_5 = 0,
  ext_3 = 0,
  ...
)
}
\arguments{
\item{sseqid}{the name of a single object of the xstringset}

\item{start}{a positive integer}

\item{end}{a positive integer > start}

\item{strand}{either '+' (5' to 3') or '-' (3' to 5')}

\item{xstringset}{object of type XStringSet (BioStrings package)}

\item{ext_5}{defines extraction limits; positive number of type count that extends the intervall in 3' direction}

\item{ext_3}{defines extraction limits; positive number of type count that extends the intervall in 3' direction.}

\item{...}{for use with pmap()}
}
\value{
Output is a tibble with additional columns 'start_extr', 'end_extr', possible extraction margins as specified in the input
}
\description{
Helper function for \code{\link{blast_to_xstring}}
}
\details{
Checks whether specified extraction margins are in accordance with the width of the XString
and returns either the specified range or the maximus available range according to the width of the XString.
The specified margins 'ext_3' and 'ext_5' are interpreted in a 'strand-sensitive' manner.
}
\examples{

# generate example_xstringset and example_blast:
example_xstringset <- system.file("data-raw", "example_xstringset.fna" , package = "rentrezaddon", mustWork = TRUE) \%>\% Biostrings::readDNAStringSet(.)
example_blast

# define extraction borders
define_extraction_borders(sseqid = "sequence_1",  start = 19, end = 43, strand = "-",
xstringset = example_xstringset, ext_5 = 20, ext_3 = 15)

# for rowwise application in a tibble with pmap - fixed 5' and 3' extensions for all:
example_blast \%>\%
dplyr::transmute(sseqid, df_strand = purrr::pmap(., define_strand)) \%>\%
tidyr::unnest(df_strand) \%>\%
dplyr::mutate(extraction = purrr::pmap(., define_extraction_borders, ext_5 = 10, ext_3 = 20, xstringset = example_xstringset)) \%>\%
unnest(extraction)

# for rowwise application in a tibble with pmap - every hit/row with individual 5' or 3' extensions:
example_blast \%>\%
dplyr::transmute(sseqid, df_strand = purrr::pmap(., define_strand)) \%>\%
tidyr::unnest(df_strand) \%>\%
dplyr::mutate(ext_5 = as.double(1:17), ext_3 = as.double(17:1)) \%>\%
dplyr::mutate(extraction = purrr::pmap(., define_extraction_borders, xstringset = example_xstringset)) \%>\%
unnest(extraction)
}
